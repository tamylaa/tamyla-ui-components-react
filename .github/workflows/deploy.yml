name: Build, Test & Publish UI Components React

on:
  push:
    branches: [ main, master ]
    paths:
      - 'src/**'
      - 'package.json'
      - 'package-lock.json'
      - 'rollup.config.js'
      - 'tsconfig.json'
      - '.github/workflows/**'
      - 'scripts/**'
      - 'README.md'
      - 'CHANGELOG.md'
      - 'examples/**'
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

env:
  NODE_VERSION: '18.x'

permissions:
  contents: write
  issues: write
  pull-requests: write
  packages: write

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [16.x, 18.x, 20.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm install --legacy-peer-deps

    - name: Run linting
      run: npm run lint
      continue-on-error: true

    - name: Run tests
      run: npm run test:coverage
      continue-on-error: true
    
    - name: Upload coverage to Codecov
      if: matrix.node-version == '18.x'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella

  build:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm install --legacy-peer-deps
    
    - name: Build package
      run: npm run build
    
    - name: Run bundle analysis
      run: npm run analyze
      continue-on-error: true
    
    - name: Test package creation
      run: npm pack --dry-run
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist-files-react
        path: dist/
        retention-days: 30

  semantic-release:
    runs-on: ubuntu-latest
    needs: [test, build]
    if: (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master') && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        registry-url: 'https://registry.npmjs.org'
        scope: '@tamyla'
    
    - name: Install dependencies
      run: npm install --legacy-peer-deps
    
    - name: Build for release
      run: npm run build
    
    - name: Verify build readiness
      run: |
        echo "üîç Verifying build readiness..."
        echo "üì¶ Node.js version: $(node --version)"
        echo "üì¶ NPM version: $(npm --version)"
        echo "üìÅ Current directory: $(pwd)"
        echo "üìÅ Package.json exists: $(test -f package.json && echo 'Yes' || echo 'No')"
        echo "üìÅ Source directory: $(test -d src && echo 'Yes' || echo 'No')"
        echo "‚úÖ Build environment verified"
    
    - name: Semantic Release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        NPM_TOKEN: ${{ secrets.NPM_GITHUB_ACTION_AUTO }}
        NODE_AUTH_TOKEN: ${{ secrets.NPM_GITHUB_ACTION_AUTO }}
      run: |
        if [ -z "$NPM_TOKEN" ]; then
          echo "NPM_GITHUB_ACTION_AUTO not available - skipping semantic release"
          exit 0
        fi
        npx semantic-release

  deploy-cdn:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist-files-react
        path: dist/
    
    - name: Deploy to CDN
      env:
        CDN_API_KEY: ${{ secrets.CDN_API_KEY }}
        CDN_ENDPOINT: ${{ secrets.CDN_ENDPOINT }}
      run: |
        # Upload to CDN (React components)
        for file in dist/*.js dist/*.css; do
          if [ -f "$file" ]; then
            curl -X PUT \
              -H "Authorization: Bearer $CDN_API_KEY" \
              -H "Content-Type: application/octet-stream" \
              --data-binary "@$file" \
              "$CDN_ENDPOINT/tamyla-ui-react/$(basename $file)"
          fi
        done
      continue-on-error: true
